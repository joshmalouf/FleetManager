// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: Compressor.sql

package pgsql

import (
	"context"
	"database/sql"
)

const assignCompressor = `-- name: AssignCompressor :exec
UPDATE assets.Compressors
SET unit_id = $2
WHERE id = $1
`

type AssignCompressorParams struct {
	ID     int64         `json:"id"`
	UnitID sql.NullInt32 `json:"unit_id"`
}

func (q *Queries) AssignCompressor(ctx context.Context, arg AssignCompressorParams) error {
	_, err := q.db.ExecContext(ctx, assignCompressor, arg.ID, arg.UnitID)
	return err
}

const createCompressor = `-- name: CreateCompressor :one
INSERT INTO assets.Compressors
(make, model, serial_number, throws)
VALUES
($1, $2, $3, $4)
RETURNING id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at
`

type CreateCompressorParams struct {
	Make         string `json:"make"`
	Model        string `json:"model"`
	SerialNumber string `json:"serial_number"`
	Throws       int32  `json:"throws"`
}

func (q *Queries) CreateCompressor(ctx context.Context, arg CreateCompressorParams) (AssetsCompressor, error) {
	row := q.db.QueryRowContext(ctx, createCompressor,
		arg.Make,
		arg.Model,
		arg.SerialNumber,
		arg.Throws,
	)
	var i AssetsCompressor
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.SerialNumber,
		&i.Throws,
		&i.OpStatus,
		&i.UnitID,
		&i.CylinderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deactivateCompressor = `-- name: DeactivateCompressor :exec
UPDATE assets.Compressors
SET opstatus = "inactive", unit_id = NULL
WHERE id = $1
`

func (q *Queries) DeactivateCompressor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateCompressor, id)
	return err
}

const disposeCompressor = `-- name: DisposeCompressor :exec
UPDATE assets.Compressors
Set op_status = "disposed", unit_id = null
`

func (q *Queries) DisposeCompressor(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, disposeCompressor)
	return err
}

const getAvailCompressors = `-- name: GetAvailCompressors :many
SELECT id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at FROM assets.Compressors
WHERE opstatus = "active" AND unit_id = NULL
`

func (q *Queries) GetAvailCompressors(ctx context.Context) ([]AssetsCompressor, error) {
	rows, err := q.db.QueryContext(ctx, getAvailCompressors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCompressor{}
	for rows.Next() {
		var i AssetsCompressor
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.SerialNumber,
			&i.Throws,
			&i.OpStatus,
			&i.UnitID,
			&i.CylinderID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompressorByID = `-- name: GetCompressorByID :one
SELECT id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at FROM assets.Compressors
WHERE id = $1
`

func (q *Queries) GetCompressorByID(ctx context.Context, id int64) (AssetsCompressor, error) {
	row := q.db.QueryRowContext(ctx, getCompressorByID, id)
	var i AssetsCompressor
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.SerialNumber,
		&i.Throws,
		&i.OpStatus,
		&i.UnitID,
		&i.CylinderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCompressorByMakeModel = `-- name: GetCompressorByMakeModel :many
SELECT id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at FROM assets.Compressors
WHERE make = $1 AND model = $2
ORDER BY throws
`

type GetCompressorByMakeModelParams struct {
	Make  string `json:"make"`
	Model string `json:"model"`
}

func (q *Queries) GetCompressorByMakeModel(ctx context.Context, arg GetCompressorByMakeModelParams) ([]AssetsCompressor, error) {
	rows, err := q.db.QueryContext(ctx, getCompressorByMakeModel, arg.Make, arg.Model)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCompressor{}
	for rows.Next() {
		var i AssetsCompressor
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.SerialNumber,
			&i.Throws,
			&i.OpStatus,
			&i.UnitID,
			&i.CylinderID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompressorBySerial = `-- name: GetCompressorBySerial :one
SELECT id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at FROM assets.Compressors
WHERE serial_number = $1
`

func (q *Queries) GetCompressorBySerial(ctx context.Context, serialNumber string) (AssetsCompressor, error) {
	row := q.db.QueryRowContext(ctx, getCompressorBySerial, serialNumber)
	var i AssetsCompressor
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.SerialNumber,
		&i.Throws,
		&i.OpStatus,
		&i.UnitID,
		&i.CylinderID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCompressors = `-- name: GetCompressors :many
SELECT id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at FROM assets.Compressors
ORDER BY make
`

func (q *Queries) GetCompressors(ctx context.Context) ([]AssetsCompressor, error) {
	rows, err := q.db.QueryContext(ctx, getCompressors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCompressor{}
	for rows.Next() {
		var i AssetsCompressor
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.SerialNumber,
			&i.Throws,
			&i.OpStatus,
			&i.UnitID,
			&i.CylinderID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompressorsByMake = `-- name: GetCompressorsByMake :many
SELECT id, make, model, serial_number, throws, op_status, unit_id, cylinder_id, created_at, modified_at FROM assets.Compressors
WHERE make = $1
ORDER BY model
`

func (q *Queries) GetCompressorsByMake(ctx context.Context, make string) ([]AssetsCompressor, error) {
	rows, err := q.db.QueryContext(ctx, getCompressorsByMake, make)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCompressor{}
	for rows.Next() {
		var i AssetsCompressor
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.SerialNumber,
			&i.Throws,
			&i.OpStatus,
			&i.UnitID,
			&i.CylinderID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
