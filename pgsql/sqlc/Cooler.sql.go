// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: Cooler.sql

package pgsql

import (
	"context"
	"database/sql"
)

const assignCooler = `-- name: AssignCooler :exec
UPDATE assets.Coolers
SET unit_id = $2
WHERE id = $1
`

type AssignCoolerParams struct {
	ID     int64         `json:"id"`
	UnitID sql.NullInt32 `json:"unit_id"`
}

func (q *Queries) AssignCooler(ctx context.Context, arg AssignCoolerParams) error {
	_, err := q.db.ExecContext(ctx, assignCooler, arg.ID, arg.UnitID)
	return err
}

const createCooler = `-- name: CreateCooler :one
INSERT INTO assets.coolers
(make, model, size, job_number)
VALUES
($1, $2, $3, $4)
RETURNING id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at
`

type CreateCoolerParams struct {
	Make      string `json:"make"`
	Model     string `json:"model"`
	Size      int32  `json:"size"`
	JobNumber string `json:"job_number"`
}

func (q *Queries) CreateCooler(ctx context.Context, arg CreateCoolerParams) (AssetsCooler, error) {
	row := q.db.QueryRowContext(ctx, createCooler,
		arg.Make,
		arg.Model,
		arg.Size,
		arg.JobNumber,
	)
	var i AssetsCooler
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Size,
		&i.JobNumber,
		&i.OpStatus,
		&i.UnitID,
		&i.SectionID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deactivateCooler = `-- name: DeactivateCooler :exec
UPDATE assets.Coolers
SET opstatus = "inactive", unit_id = NULL
WHERE id = $1
`

func (q *Queries) DeactivateCooler(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateCooler, id)
	return err
}

const getAvailCoolers = `-- name: GetAvailCoolers :many
SELECT id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at FROM assets.Coolers
WHERE opstatus = "active" AND unit_id = NULL
`

func (q *Queries) GetAvailCoolers(ctx context.Context) ([]AssetsCooler, error) {
	rows, err := q.db.QueryContext(ctx, getAvailCoolers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCooler{}
	for rows.Next() {
		var i AssetsCooler
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.Size,
			&i.JobNumber,
			&i.OpStatus,
			&i.UnitID,
			&i.SectionID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoolerByID = `-- name: GetCoolerByID :one
SELECT id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at FROM assets.Coolers
WHERE id = $1
`

func (q *Queries) GetCoolerByID(ctx context.Context, id int64) (AssetsCooler, error) {
	row := q.db.QueryRowContext(ctx, getCoolerByID, id)
	var i AssetsCooler
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Size,
		&i.JobNumber,
		&i.OpStatus,
		&i.UnitID,
		&i.SectionID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCoolerByJob = `-- name: GetCoolerByJob :one
SELECT id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at FROM assets.Coolers
WHERE job_number = $1
`

func (q *Queries) GetCoolerByJob(ctx context.Context, jobNumber string) (AssetsCooler, error) {
	row := q.db.QueryRowContext(ctx, getCoolerByJob, jobNumber)
	var i AssetsCooler
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Size,
		&i.JobNumber,
		&i.OpStatus,
		&i.UnitID,
		&i.SectionID,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCoolerByMakeModel = `-- name: GetCoolerByMakeModel :many
SELECT id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at FROM assets.Coolers
WHERE make = $1 AND model = $2
ORDER BY size
`

type GetCoolerByMakeModelParams struct {
	Make  string `json:"make"`
	Model string `json:"model"`
}

func (q *Queries) GetCoolerByMakeModel(ctx context.Context, arg GetCoolerByMakeModelParams) ([]AssetsCooler, error) {
	rows, err := q.db.QueryContext(ctx, getCoolerByMakeModel, arg.Make, arg.Model)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCooler{}
	for rows.Next() {
		var i AssetsCooler
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.Size,
			&i.JobNumber,
			&i.OpStatus,
			&i.UnitID,
			&i.SectionID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoolers = `-- name: GetCoolers :many
SELECT id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at FROM assets.Coolers
ORDER BY make
`

func (q *Queries) GetCoolers(ctx context.Context) ([]AssetsCooler, error) {
	rows, err := q.db.QueryContext(ctx, getCoolers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCooler{}
	for rows.Next() {
		var i AssetsCooler
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.Size,
			&i.JobNumber,
			&i.OpStatus,
			&i.UnitID,
			&i.SectionID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCoolersByMake = `-- name: GetCoolersByMake :many
SELECT id, make, model, size, job_number, op_status, unit_id, section_id, created_at, modified_at FROM assets.Coolers
WHERE make = $1
ORDER BY model
`

func (q *Queries) GetCoolersByMake(ctx context.Context, make string) ([]AssetsCooler, error) {
	rows, err := q.db.QueryContext(ctx, getCoolersByMake, make)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCooler{}
	for rows.Next() {
		var i AssetsCooler
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.Size,
			&i.JobNumber,
			&i.OpStatus,
			&i.UnitID,
			&i.SectionID,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
