// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: Cylinder.sql

package pgsql

import (
	"context"
	"database/sql"
)

const assignCylinder = `-- name: AssignCylinder :exec
UPDATE assets.Cylinders
SET opstatus = "active", comp_id = $2
WHERE id = $1
`

type AssignCylinderParams struct {
	ID     int64         `json:"id"`
	CompID sql.NullInt32 `json:"comp_id"`
}

func (q *Queries) AssignCylinder(ctx context.Context, arg AssignCylinderParams) error {
	_, err := q.db.ExecContext(ctx, assignCylinder, arg.ID, arg.CompID)
	return err
}

const createCylinder = `-- name: CreateCylinder :one
INSERT INTO assets.Cylinders
(make, model, mawp, serial_number)
VALUES
($1, $2, $3, $4)
RETURNING id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at
`

type CreateCylinderParams struct {
	Make         string `json:"make"`
	Model        string `json:"model"`
	Mawp         int32  `json:"mawp"`
	SerialNumber string `json:"serial_number"`
}

func (q *Queries) CreateCylinder(ctx context.Context, arg CreateCylinderParams) (AssetsCylinder, error) {
	row := q.db.QueryRowContext(ctx, createCylinder,
		arg.Make,
		arg.Model,
		arg.Mawp,
		arg.SerialNumber,
	)
	var i AssetsCylinder
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Bore,
		&i.Mawp,
		&i.SerialNumber,
		&i.CompID,
		&i.OpStatus,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deactivateCylinder = `-- name: DeactivateCylinder :one
UPDATE assets.Cylinders
SET opstatus = "inactive", comp_id = NULL
WHERE id = $1
RETURNING id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at
`

func (q *Queries) DeactivateCylinder(ctx context.Context, id int64) (AssetsCylinder, error) {
	row := q.db.QueryRowContext(ctx, deactivateCylinder, id)
	var i AssetsCylinder
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Bore,
		&i.Mawp,
		&i.SerialNumber,
		&i.CompID,
		&i.OpStatus,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteCylinder = `-- name: DeleteCylinder :exec
DELETE FROM assets.Cylinders
WHERE id = $1
`

func (q *Queries) DeleteCylinder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCylinder, id)
	return err
}

const disposeCylinder = `-- name: DisposeCylinder :one
UPDATE assets.Cylinders
SET opstatus = "disposed", comp_id = NULL
WHERE id = $1
RETURNING id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at
`

func (q *Queries) DisposeCylinder(ctx context.Context, id int64) (AssetsCylinder, error) {
	row := q.db.QueryRowContext(ctx, disposeCylinder, id)
	var i AssetsCylinder
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Bore,
		&i.Mawp,
		&i.SerialNumber,
		&i.CompID,
		&i.OpStatus,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCylinderByID = `-- name: GetCylinderByID :one
SELECT id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at FROM assets.Cylinders
WHERE id = $1
`

func (q *Queries) GetCylinderByID(ctx context.Context, id int64) (AssetsCylinder, error) {
	row := q.db.QueryRowContext(ctx, getCylinderByID, id)
	var i AssetsCylinder
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Bore,
		&i.Mawp,
		&i.SerialNumber,
		&i.CompID,
		&i.OpStatus,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCylinderBySerial = `-- name: GetCylinderBySerial :one
SELECT id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at FROM assets.Cylinders
WHERE serial_number = $1
`

func (q *Queries) GetCylinderBySerial(ctx context.Context, serialNumber string) (AssetsCylinder, error) {
	row := q.db.QueryRowContext(ctx, getCylinderBySerial, serialNumber)
	var i AssetsCylinder
	err := row.Scan(
		&i.ID,
		&i.Make,
		&i.Model,
		&i.Bore,
		&i.Mawp,
		&i.SerialNumber,
		&i.CompID,
		&i.OpStatus,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCylinders = `-- name: GetCylinders :many
SELECT id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at FROM assets.Cylinders
ORDER BY make
`

func (q *Queries) GetCylinders(ctx context.Context) ([]AssetsCylinder, error) {
	rows, err := q.db.QueryContext(ctx, getCylinders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCylinder{}
	for rows.Next() {
		var i AssetsCylinder
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.Bore,
			&i.Mawp,
			&i.SerialNumber,
			&i.CompID,
			&i.OpStatus,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCylindersByMakeModel = `-- name: GetCylindersByMakeModel :many
SELECT id, make, model, bore, mawp, serial_number, comp_id, op_status, created_at, modified_at FROM assets.Cylinders
WHERE make = $1 AND model = $2
ORDER BY bore
`

type GetCylindersByMakeModelParams struct {
	Make  string `json:"make"`
	Model string `json:"model"`
}

func (q *Queries) GetCylindersByMakeModel(ctx context.Context, arg GetCylindersByMakeModelParams) ([]AssetsCylinder, error) {
	rows, err := q.db.QueryContext(ctx, getCylindersByMakeModel, arg.Make, arg.Model)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCylinder{}
	for rows.Next() {
		var i AssetsCylinder
		if err := rows.Scan(
			&i.ID,
			&i.Make,
			&i.Model,
			&i.Bore,
			&i.Mawp,
			&i.SerialNumber,
			&i.CompID,
			&i.OpStatus,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
