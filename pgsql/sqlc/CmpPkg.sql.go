// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: CmpPkg.sql

package pgsql

import (
	"context"
	"database/sql"
)

const cmpPkgChgComp = `-- name: CmpPkgChgComp :one
UPDATE assets.CmpPkgs
SET compressor_id = $2
WHERE id = $1
RETURNING id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at
`

type CmpPkgChgCompParams struct {
	ID           int64         `json:"id"`
	CompressorID sql.NullInt32 `json:"compressor_id"`
}

func (q *Queries) CmpPkgChgComp(ctx context.Context, arg CmpPkgChgCompParams) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, cmpPkgChgComp, arg.ID, arg.CompressorID)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const cmpPkgChgDriver = `-- name: CmpPkgChgDriver :one
UPDATE assets.CmpPkgs 
SET driver_id = $2
WHERE id = $1
RETURNING id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at
`

type CmpPkgChgDriverParams struct {
	ID       int64         `json:"id"`
	DriverID sql.NullInt32 `json:"driver_id"`
}

func (q *Queries) CmpPkgChgDriver(ctx context.Context, arg CmpPkgChgDriverParams) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, cmpPkgChgDriver, arg.ID, arg.DriverID)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const createCmpPkg = `-- name: CreateCmpPkg :one
INSERT INTO assets.CmpPkgs 
(unit_number,stages, drawing_ref)
VALUES
($1,$2, $3)
RETURNING id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at
`

type CreateCmpPkgParams struct {
	UnitNumber string      `json:"unit_number"`
	Stages     string      `json:"stages"`
	DrawingRef interface{} `json:"drawing_ref"`
}

func (q *Queries) CreateCmpPkg(ctx context.Context, arg CreateCmpPkgParams) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, createCmpPkg, arg.UnitNumber, arg.Stages, arg.DrawingRef)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deactivateCmpPkg = `-- name: DeactivateCmpPkg :one
UPDATE assets.CmpPkgs
SET op_status = "inactive"
WHERE id = $1
RETURNING id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at
`

func (q *Queries) DeactivateCmpPkg(ctx context.Context, id int64) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, deactivateCmpPkg, id)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteCmpPkg = `-- name: DeleteCmpPkg :exec
DELETE FROM assets.CmpPkgs
WHERE id = $1
`

func (q *Queries) DeleteCmpPkg(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCmpPkg, id)
	return err
}

const disposeCmpPkg = `-- name: DisposeCmpPkg :one
UPDATE assets.CmpPkgs
SET op_status = "disposed"
WHERE id = $1
RETURNING id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at
`

func (q *Queries) DisposeCmpPkg(ctx context.Context, id int64) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, disposeCmpPkg, id)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCmpPkgByID = `-- name: GetCmpPkgByID :one
SELECT id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at FROM assets.CmpPkgs
WHERE id = $1
`

func (q *Queries) GetCmpPkgByID(ctx context.Context, id int64) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, getCmpPkgByID, id)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCmpPkgByUnitNumber = `-- name: GetCmpPkgByUnitNumber :one
SELECT id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at FROM assets.CmpPkgs
WHERE unit_number = $1
`

func (q *Queries) GetCmpPkgByUnitNumber(ctx context.Context, unitNumber string) (AssetsCmppkg, error) {
	row := q.db.QueryRowContext(ctx, getCmpPkgByUnitNumber, unitNumber)
	var i AssetsCmppkg
	err := row.Scan(
		&i.ID,
		&i.UnitNumber,
		&i.Stages,
		&i.OpStatus,
		&i.ComStatus,
		&i.CurrentLocation,
		&i.DriverID,
		&i.CompressorID,
		&i.CoolerID,
		&i.VesselID,
		&i.DrawingRef,
		&i.Bom,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCmpPkgs = `-- name: GetCmpPkgs :many
SELECT id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at FROM assets.CmpPkgs
ORDER BY unit_number
`

func (q *Queries) GetCmpPkgs(ctx context.Context) ([]AssetsCmppkg, error) {
	rows, err := q.db.QueryContext(ctx, getCmpPkgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCmppkg{}
	for rows.Next() {
		var i AssetsCmppkg
		if err := rows.Scan(
			&i.ID,
			&i.UnitNumber,
			&i.Stages,
			&i.OpStatus,
			&i.ComStatus,
			&i.CurrentLocation,
			&i.DriverID,
			&i.CompressorID,
			&i.CoolerID,
			&i.VesselID,
			&i.DrawingRef,
			&i.Bom,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCmpPkgsByEngine = `-- name: GetCmpPkgsByEngine :many
SELECT pkgs.unit_number, eng.make, eng.model
FROM assets.CmpPkgs pkgs
INNER JOIN assets.drivers dvr ON dvr.id = pkgs.driver_id
INNER JOIN assets.engines eng ON eng.id = dvr.id
WHERE eng.make = $1 AND eng.model = $2
`

type GetCmpPkgsByEngineParams struct {
	Make  string `json:"make"`
	Model string `json:"model"`
}

type GetCmpPkgsByEngineRow struct {
	UnitNumber string `json:"unit_number"`
	Make       string `json:"make"`
	Model      string `json:"model"`
}

func (q *Queries) GetCmpPkgsByEngine(ctx context.Context, arg GetCmpPkgsByEngineParams) ([]GetCmpPkgsByEngineRow, error) {
	rows, err := q.db.QueryContext(ctx, getCmpPkgsByEngine, arg.Make, arg.Model)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCmpPkgsByEngineRow{}
	for rows.Next() {
		var i GetCmpPkgsByEngineRow
		if err := rows.Scan(&i.UnitNumber, &i.Make, &i.Model); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCmpPkgsByStages = `-- name: GetCmpPkgsByStages :many
SELECT id, unit_number, stages, op_status, com_status, current_location, driver_id, compressor_id, cooler_id, vessel_id, drawing_ref, bom, created_at, modified_at FROM assets.CmpPkgs
WHERE stages = $1
`

func (q *Queries) GetCmpPkgsByStages(ctx context.Context, stages string) ([]AssetsCmppkg, error) {
	rows, err := q.db.QueryContext(ctx, getCmpPkgsByStages, stages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AssetsCmppkg{}
	for rows.Next() {
		var i AssetsCmppkg
		if err := rows.Scan(
			&i.ID,
			&i.UnitNumber,
			&i.Stages,
			&i.OpStatus,
			&i.ComStatus,
			&i.CurrentLocation,
			&i.DriverID,
			&i.CompressorID,
			&i.CoolerID,
			&i.VesselID,
			&i.DrawingRef,
			&i.Bom,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
